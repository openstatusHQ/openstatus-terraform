{
  "openapi": "3.0.0",
  "info": { "version": "1.0.0", "title": "OpenStatus API" },
  "components": {
    "schemas": {
      "ErrBadRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "USAGE_EXCEEDED",
              "DISABLED",
              "CONFLICT",
              "NOT_FOUND",
              "NOT_UNIQUE",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "BAD_REQUEST"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "Missing required field 'name'."
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/BAD_REQUEST"
          }
        },
        "required": ["code", "message", "docs"]
      },
      "ErrUnauthorized": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "USAGE_EXCEEDED",
              "DISABLED",
              "CONFLICT",
              "NOT_FOUND",
              "NOT_UNIQUE",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "UNAUTHORIZED"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "Missing required field 'name'."
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/UNAUTHORIZED"
          }
        },
        "required": ["code", "message", "docs"]
      },
      "ErrForbidden": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "USAGE_EXCEEDED",
              "DISABLED",
              "CONFLICT",
              "NOT_FOUND",
              "NOT_UNIQUE",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "FORBIDDEN"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "Missing required field 'name'."
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/FORBIDDEN"
          }
        },
        "required": ["code", "message", "docs"]
      },
      "ErrNotFound": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "USAGE_EXCEEDED",
              "DISABLED",
              "CONFLICT",
              "NOT_FOUND",
              "NOT_UNIQUE",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "NOT_FOUND"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "Missing required field 'name'."
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/NOT_FOUND"
          }
        },
        "required": ["code", "message", "docs"]
      },
      "ErrConflict": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "USAGE_EXCEEDED",
              "DISABLED",
              "CONFLICT",
              "NOT_FOUND",
              "NOT_UNIQUE",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "CONFLICT"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "Missing required field 'name'."
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/CONFLICT"
          }
        },
        "required": ["code", "message", "docs"]
      },
      "ErrInternalServerError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "USAGE_EXCEEDED",
              "DISABLED",
              "CONFLICT",
              "NOT_FOUND",
              "NOT_UNIQUE",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "INTERNAL_SERVER_ERROR"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "Missing required field 'name'."
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/INTERNAL_SERVER_ERROR"
          }
        },
        "required": ["code", "message", "docs"]
      }
    },
    "parameters": {}
  },
  "paths": {
    "/incident": {
      "get": {
        "tags": ["incident"],
        "description": "Get all Incidents",
        "responses": {
          "200": {
            "description": "Get all incidents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "description": "The id of the incident",
                        "example": 1
                      },
                      "startedAt": {
                        "type": "string",
                        "nullable": true,
                        "description": "The date the incident started"
                      },
                      "monitorId": {
                        "type": "number",
                        "nullable": true,
                        "description": "The id of the monitor associated with the incident",
                        "example": 1
                      },
                      "acknowledgedAt": {
                        "type": "string",
                        "nullable": true,
                        "description": "The date the incident was acknowledged"
                      },
                      "acknowledgedBy": {
                        "type": "number",
                        "nullable": true,
                        "description": "The user who acknowledged the incident"
                      },
                      "resolvedAt": {
                        "type": "string",
                        "nullable": true,
                        "description": "The date the incident was resolved"
                      },
                      "resolvedBy": {
                        "type": "number",
                        "nullable": true,
                        "description": "The user who resolved the incident"
                      }
                    },
                    "required": [
                      "id",
                      "startedAt",
                      "monitorId",
                      "acknowledgedBy",
                      "resolvedBy"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/incident/:id": {
      "get": {
        "tags": ["incident"],
        "description": "Get an incident",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the Incident",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get an incident",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the incident",
                      "example": 1
                    },
                    "startedAt": {
                      "type": "string",
                      "nullable": true,
                      "description": "The date the incident started"
                    },
                    "monitorId": {
                      "type": "number",
                      "nullable": true,
                      "description": "The id of the monitor associated with the incident",
                      "example": 1
                    },
                    "acknowledgedAt": {
                      "type": "string",
                      "nullable": true,
                      "description": "The date the incident was acknowledged"
                    },
                    "acknowledgedBy": {
                      "type": "number",
                      "nullable": true,
                      "description": "The user who acknowledged the incident"
                    },
                    "resolvedAt": {
                      "type": "string",
                      "nullable": true,
                      "description": "The date the incident was resolved"
                    },
                    "resolvedBy": {
                      "type": "number",
                      "nullable": true,
                      "description": "The user who resolved the incident"
                    }
                  },
                  "required": [
                    "id",
                    "startedAt",
                    "monitorId",
                    "acknowledgedBy",
                    "resolvedBy"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["incident"],
        "description": "Update an incident",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the Incident",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "The incident to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "acknowledgedAt": { "type": "string", "nullable": true },
                  "resolvedAt": { "type": "string", "nullable": true }
                },
                "description": "The incident to update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a monitor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the incident",
                      "example": 1
                    },
                    "startedAt": {
                      "type": "string",
                      "nullable": true,
                      "description": "The date the incident started"
                    },
                    "monitorId": {
                      "type": "number",
                      "nullable": true,
                      "description": "The id of the monitor associated with the incident",
                      "example": 1
                    },
                    "acknowledgedAt": {
                      "type": "string",
                      "nullable": true,
                      "description": "The date the incident was acknowledged"
                    },
                    "acknowledgedBy": {
                      "type": "number",
                      "nullable": true,
                      "description": "The user who acknowledged the incident"
                    },
                    "resolvedAt": {
                      "type": "string",
                      "nullable": true,
                      "description": "The date the incident was resolved"
                    },
                    "resolvedBy": {
                      "type": "number",
                      "nullable": true,
                      "description": "The user who resolved the incident"
                    }
                  },
                  "required": [
                    "id",
                    "startedAt",
                    "monitorId",
                    "acknowledgedBy",
                    "resolvedBy"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/monitor": {
      "get": {
        "tags": ["monitor"],
        "description": "Get all monitors",
        "responses": {
          "200": {
            "description": "All the monitors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "description": "The id of the monitor",
                        "example": 123
                      },
                      "periodicity": {
                        "type": "string",
                        "enum": [
                          "30s",
                          "1m",
                          "5m",
                          "10m",
                          "30m",
                          "1h",
                          "other"
                        ],
                        "description": "How often the monitor should run",
                        "example": "1m"
                      },
                      "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "The url to monitor",
                        "example": "https://www.documenso.co"
                      },
                      "regions": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "ams",
                            "arn",
                            "atl",
                            "bog",
                            "bom",
                            "bos",
                            "cdg",
                            "den",
                            "dfw",
                            "ewr",
                            "eze",
                            "fra",
                            "gdl",
                            "gig",
                            "gru",
                            "hkg",
                            "iad",
                            "jnb",
                            "lax",
                            "lhr",
                            "mad",
                            "mia",
                            "nrt",
                            "ord",
                            "otp",
                            "phx",
                            "qro",
                            "scl",
                            "sjc",
                            "sea",
                            "sin",
                            "syd",
                            "waw",
                            "yul",
                            "yyz"
                          ]
                        },
                        "default": [],
                        "description": "Where we should monitor it",
                        "example": ["ams"]
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the monitor",
                        "example": "Documenso"
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of your monitor",
                        "example": "Documenso website"
                      },
                      "method": {
                        "type": "string",
                        "enum": ["GET", "POST", "HEAD"],
                        "default": "GET",
                        "example": "GET"
                      },
                      "body": {
                        "type": "string",
                        "nullable": true,
                        "default": "",
                        "description": "The body",
                        "example": "Hello World"
                      },
                      "headers": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": { "type": "string" },
                            "value": { "type": "string" }
                          },
                          "required": ["key", "value"]
                        },
                        "default": [],
                        "description": "The headers of your request",
                        "example": [
                          { "key": "x-apikey", "value": "supersecrettoken" }
                        ]
                      },
                      "assertions": {
                        "type": "array",
                        "nullable": true,
                        "items":   {
                           "type": "object",
                           "properties": {
                             "type": { "type": "string", "enum": ["status"] },
                             "compare": {
                               "type": "string",
                               "enum": [
                                 "eq",
                                 "not_eq",
                                 "gt",
                                 "gte",
                                 "lt",
                                 "lte"
                               ],
                               "description": "The comparison to run",
                               "example": "eq"
                             },
                             "target": {
                               "type": "integer",
                               "minimum": 0,
                               "exclusiveMinimum": true,
                               "description": "The target value"
                             }
                           },
                           "required": ["type", "compare", "target"],
                           "description": "The status assertion"
                         },
                        "default": [],
                        "description": "The assertions to run"
                      },
                      "active": {
                        "type": "boolean",
                        "default": false,
                        "description": "If the monitor is active"
                      },
                      "public": {
                        "type": "boolean",
                        "default": false,
                        "description": "If the monitor is public"
                      },
                      "degratedAfter": {
                        "type": "number",
                        "description": "The time after the monitor is considered degrated"
                      },
                      "timeout": {
                        "type": "number",
                        "description": "The timeout of the request"
                      }
                    },
                    "required": ["periodicity", "url", "regions", "method"],
                    "description": "The monitor"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["monitor"],
        "description": "Create a monitor",
        "requestBody": {
          "description": "The monitor to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "periodicity": {
                    "type": "string",
                    "enum": ["30s", "1m", "5m", "10m", "30m", "1h", "other"],
                    "description": "How often the monitor should run",
                    "example": "1m"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "The url to monitor",
                    "example": "https://www.documenso.co"
                  },
                  "regions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ams",
                        "arn",
                        "atl",
                        "bog",
                        "bom",
                        "bos",
                        "cdg",
                        "den",
                        "dfw",
                        "ewr",
                        "eze",
                        "fra",
                        "gdl",
                        "gig",
                        "gru",
                        "hkg",
                        "iad",
                        "jnb",
                        "lax",
                        "lhr",
                        "mad",
                        "mia",
                        "nrt",
                        "ord",
                        "otp",
                        "phx",
                        "qro",
                        "scl",
                        "sjc",
                        "sea",
                        "sin",
                        "syd",
                        "waw",
                        "yul",
                        "yyz"
                      ]
                    },
                    "default": [],
                    "description": "Where we should monitor it",
                    "example": ["ams"]
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the monitor",
                    "example": "Documenso"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of your monitor",
                    "example": "Documenso website"
                  },
                  "method": {
                    "type": "string",
                    "enum": ["GET", "POST", "HEAD"],
                    "default": "GET",
                    "example": "GET"
                  },
                  "body": {
                    "type": "string",
                    "nullable": true,
                    "default": "",
                    "description": "The body",
                    "example": "Hello World"
                  },
                  "headers": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": { "type": "string" },
                        "value": { "type": "string" }
                      },
                      "required": ["key", "value"]
                    },
                    "default": [],
                    "description": "The headers of your request",
                    "example": [
                      { "key": "x-apikey", "value": "supersecrettoken" }
                    ]
                  },
                  "assertions": {
                    "type": "array",
                    "nullable": true,
                    "items":   {
                     "type": "object",
                     "properties": {
                       "type": { "type": "string", "enum": ["status"] },
                       "compare": {
                         "type": "string",
                         "enum": [
                           "eq",
                           "not_eq",
                           "gt",
                           "gte",
                           "lt",
                           "lte"
                         ],
                         "description": "The comparison to run",
                         "example": "eq"
                       },
                       "target": {
                         "type": "integer",
                         "minimum": 0,
                         "exclusiveMinimum": true,
                         "description": "The target value"
                       }
                     },
                     "required": ["type", "compare", "target"],
                     "description": "The status assertion"
                   },
                    "default": [],
                    "description": "The assertions to run"
                  },
                  "active": {
                    "type": "boolean",
                    "default": false,
                    "description": "If the monitor is active"
                  },
                  "public": {
                    "type": "boolean",
                    "default": false,
                    "description": "If the monitor is public"
                  },
                  "degratedAfter": {
                    "type": "number",
                    "description": "The time after the monitor is considered degrated"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "The timeout of the request"
                  }
                },
                "required": ["periodicity", "url", "name"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a monitor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the monitor",
                      "example": 123
                    },
                    "periodicity": {
                      "type": "string",
                      "enum": ["30s", "1m", "5m", "10m", "30m", "1h", "other"],
                      "description": "How often the monitor should run",
                      "example": "1m"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri",
                      "description": "The url to monitor",
                      "example": "https://www.documenso.co"
                    },
                    "regions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "ams",
                          "arn",
                          "atl",
                          "bog",
                          "bom",
                          "bos",
                          "cdg",
                          "den",
                          "dfw",
                          "ewr",
                          "eze",
                          "fra",
                          "gdl",
                          "gig",
                          "gru",
                          "hkg",
                          "iad",
                          "jnb",
                          "lax",
                          "lhr",
                          "mad",
                          "mia",
                          "nrt",
                          "ord",
                          "otp",
                          "phx",
                          "qro",
                          "scl",
                          "sjc",
                          "sea",
                          "sin",
                          "syd",
                          "waw",
                          "yul",
                          "yyz"
                        ]
                      },
                      "default": [],
                      "description": "Where we should monitor it",
                      "example": ["ams"]
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the monitor",
                      "example": "Documenso"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of your monitor",
                      "example": "Documenso website"
                    },
                    "method": {
                      "type": "string",
                      "enum": ["GET", "POST", "HEAD"],
                      "default": "GET",
                      "example": "GET"
                    },
                    "body": {
                      "type": "string",
                      "nullable": true,
                      "default": "",
                      "description": "The body",
                      "example": "Hello World"
                    },
                    "headers": {
                      "type": "array",
                      "nullable": true,
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": { "type": "string" },
                          "value": { "type": "string" }
                        },
                        "required": ["key", "value"]
                      },
                      "default": [],
                      "description": "The headers of your request",
                      "example": [
                        { "key": "x-apikey", "value": "supersecrettoken" }
                      ]
                    },
                    "assertions": {
                      "type": "array",
                      "nullable": true,
                      "items":   {
                        "type": "object",
                        "properties": {
                          "type": { "type": "string", "enum": ["status"] },
                          "compare": {
                            "type": "string",
                            "enum": [
                              "eq",
                              "not_eq",
                              "gt",
                              "gte",
                              "lt",
                              "lte"
                            ],
                            "description": "The comparison to run",
                            "example": "eq"
                          },
                          "target": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "description": "The target value"
                          }
                        },
                        "required": ["type", "compare", "target"],
                        "description": "The status assertion"
                      },
                      "default": [],
                      "description": "The assertions to run"
                    },
                    "active": {
                      "type": "boolean",
                      "default": false,
                      "description": "If the monitor is active"
                    },
                    "public": {
                      "type": "boolean",
                      "default": false,
                      "description": "If the monitor is public"
                    },
                    "degratedAfter": {
                      "type": "number",
                      "description": "The time after the monitor is considered degrated"
                    },
                    "timeout": {
                      "type": "number",
                      "description": "The timeout of the request"
                    }
                  },
                  "required": ["periodicity", "url", "regions", "method"],
                  "description": "The monitor"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/:id": {
      "get": {
        "tags": ["monitor"],
        "description": "Get a monitor",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the monitor",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "The monitor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the monitor",
                      "example": 123
                    },
                    "periodicity": {
                      "type": "string",
                      "enum": ["30s", "1m", "5m", "10m", "30m", "1h", "other"],
                      "description": "How often the monitor should run",
                      "example": "1m"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri",
                      "description": "The url to monitor",
                      "example": "https://www.documenso.co"
                    },
                    "regions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "ams",
                          "arn",
                          "atl",
                          "bog",
                          "bom",
                          "bos",
                          "cdg",
                          "den",
                          "dfw",
                          "ewr",
                          "eze",
                          "fra",
                          "gdl",
                          "gig",
                          "gru",
                          "hkg",
                          "iad",
                          "jnb",
                          "lax",
                          "lhr",
                          "mad",
                          "mia",
                          "nrt",
                          "ord",
                          "otp",
                          "phx",
                          "qro",
                          "scl",
                          "sjc",
                          "sea",
                          "sin",
                          "syd",
                          "waw",
                          "yul",
                          "yyz"
                        ]
                      },
                      "default": [],
                      "description": "Where we should monitor it",
                      "example": ["ams"]
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the monitor",
                      "example": "Documenso"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of your monitor",
                      "example": "Documenso website"
                    },
                    "method": {
                      "type": "string",
                      "enum": ["GET", "POST", "HEAD"],
                      "default": "GET",
                      "example": "GET"
                    },
                    "body": {
                      "type": "string",
                      "nullable": true,
                      "default": "",
                      "description": "The body",
                      "example": "Hello World"
                    },
                    "headers": {
                      "type": "array",
                      "nullable": true,
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": { "type": "string" },
                          "value": { "type": "string" }
                        },
                        "required": ["key", "value"]
                      },
                      "default": [],
                      "description": "The headers of your request",
                      "example": [
                        { "key": "x-apikey", "value": "supersecrettoken" }
                      ]
                    },
                    "assertions": {
                      "type": "array",
                      "nullable": true,
                      "items":   {
                        "type": "object",
                        "properties": {
                          "type": { "type": "string", "enum": ["status"] },
                          "compare": {
                            "type": "string",
                            "enum": [
                              "eq",
                              "not_eq",
                              "gt",
                              "gte",
                              "lt",
                              "lte"
                            ],
                            "description": "The comparison to run",
                            "example": "eq"
                          },
                          "target": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "description": "The target value"
                          }
                        },
                        "required": ["type", "compare", "target"],
                        "description": "The status assertion"
                      },
                      "default": [],
                      "description": "The assertions to run"
                    },
                    "active": {
                      "type": "boolean",
                      "default": false,
                      "description": "If the monitor is active"
                    },
                    "public": {
                      "type": "boolean",
                      "default": false,
                      "description": "If the monitor is public"
                    },
                    "degratedAfter": {
                      "type": "number",
                      "description": "The time after the monitor is considered degrated"
                    },
                    "timeout": {
                      "type": "number",
                      "description": "The timeout of the request"
                    }
                  },
                  "required": ["periodicity", "url", "regions", "method"],
                  "description": "The monitor"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["monitor"],
        "description": "Update a monitor",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the monitor",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "The monitor to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "periodicity": {
                    "type": "string",
                    "enum": ["30s", "1m", "5m", "10m", "30m", "1h", "other"],
                    "description": "How often the monitor should run",
                    "example": "1m"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "The url to monitor",
                    "example": "https://www.documenso.co"
                  },
                  "regions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ams",
                        "arn",
                        "atl",
                        "bog",
                        "bom",
                        "bos",
                        "cdg",
                        "den",
                        "dfw",
                        "ewr",
                        "eze",
                        "fra",
                        "gdl",
                        "gig",
                        "gru",
                        "hkg",
                        "iad",
                        "jnb",
                        "lax",
                        "lhr",
                        "mad",
                        "mia",
                        "nrt",
                        "ord",
                        "otp",
                        "phx",
                        "qro",
                        "scl",
                        "sjc",
                        "sea",
                        "sin",
                        "syd",
                        "waw",
                        "yul",
                        "yyz"
                      ]
                    },
                    "default": [],
                    "description": "Where we should monitor it",
                    "example": ["ams"]
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the monitor",
                    "example": "Documenso"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of your monitor",
                    "example": "Documenso website"
                  },
                  "method": {
                    "type": "string",
                    "enum": ["GET", "POST", "HEAD"],
                    "default": "GET",
                    "example": "GET"
                  },
                  "body": {
                    "type": "string",
                    "nullable": true,
                    "default": "",
                    "description": "The body",
                    "example": "Hello World"
                  },
                  "headers": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": { "type": "string" },
                        "value": { "type": "string" }
                      },
                      "required": ["key", "value"]
                    },
                    "default": [],
                    "description": "The headers of your request",
                    "example": [
                      { "key": "x-apikey", "value": "supersecrettoken" }
                    ]
                  },
                  "assertions": {
                    "type": "array",
                    "nullable": true,
                    "items":  {
                     "type": "object",
                     "properties": {
                       "type": { "type": "string", "enum": ["status"] },
                       "compare": {
                         "type": "string",
                         "enum": [
                           "eq",
                           "not_eq",
                           "gt",
                           "gte",
                           "lt",
                           "lte"
                         ],
                         "description": "The comparison to run",
                         "example": "eq"
                       },
                       "target": {
                         "type": "integer",
                         "minimum": 0,
                         "exclusiveMinimum": true,
                         "description": "The target value"
                       }
                     },
                     "required": ["type", "compare", "target"],
                     "description": "The status assertion"
                   },
                    "default": [],
                    "description": "The assertions to run"
                  },
                  "active": {
                    "type": "boolean",
                    "default": false,
                    "description": "If the monitor is active"
                  },
                  "public": {
                    "type": "boolean",
                    "default": false,
                    "description": "If the monitor is public"
                  },
                  "degratedAfter": {
                    "type": "number",
                    "description": "The time after the monitor is considered degrated"
                  },
                  "timeout": {
                    "type": "number",
                    "description": "The timeout of the request"
                  }
                },
                "required": ["periodicity", "url", "name"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a monitor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the monitor",
                      "example": 123
                    },
                    "periodicity": {
                      "type": "string",
                      "enum": ["30s", "1m", "5m", "10m", "30m", "1h", "other"],
                      "description": "How often the monitor should run",
                      "example": "1m"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri",
                      "description": "The url to monitor",
                      "example": "https://www.documenso.co"
                    },
                    "regions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "ams",
                          "arn",
                          "atl",
                          "bog",
                          "bom",
                          "bos",
                          "cdg",
                          "den",
                          "dfw",
                          "ewr",
                          "eze",
                          "fra",
                          "gdl",
                          "gig",
                          "gru",
                          "hkg",
                          "iad",
                          "jnb",
                          "lax",
                          "lhr",
                          "mad",
                          "mia",
                          "nrt",
                          "ord",
                          "otp",
                          "phx",
                          "qro",
                          "scl",
                          "sjc",
                          "sea",
                          "sin",
                          "syd",
                          "waw",
                          "yul",
                          "yyz"
                        ]
                      },
                      "default": [],
                      "description": "Where we should monitor it",
                      "example": ["ams"]
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the monitor",
                      "example": "Documenso"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of your monitor",
                      "example": "Documenso website"
                    },
                    "method": {
                      "type": "string",
                      "enum": ["GET", "POST", "HEAD"],
                      "default": "GET",
                      "example": "GET"
                    },
                    "body": {
                      "type": "string",
                      "nullable": true,
                      "default": "",
                      "description": "The body",
                      "example": "Hello World"
                    },
                    "headers": {
                      "type": "array",
                      "nullable": true,
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": { "type": "string" },
                          "value": { "type": "string" }
                        },
                        "required": ["key", "value"]
                      },
                      "default": [],
                      "description": "The headers of your request",
                      "example": [
                        { "key": "x-apikey", "value": "supersecrettoken" }
                      ]
                    },
                    "assertions": {
                      "type": "array",
                      "nullable": true,
                      "items":   {
                        "type": "object",
                        "properties": {
                          "type": { "type": "string", "enum": ["status"] },
                          "compare": {
                            "type": "string",
                            "enum": [
                              "eq",
                              "not_eq",
                              "gt",
                              "gte",
                              "lt",
                              "lte"
                            ],
                            "description": "The comparison to run",
                            "example": "eq"
                          },
                          "target": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "description": "The target value"
                          }
                        },
                        "required": ["type", "compare", "target"],
                        "description": "The status assertion"
                      },
                      "default": [],
                      "description": "The assertions to run"
                    },
                    "active": {
                      "type": "boolean",
                      "default": false,
                      "description": "If the monitor is active"
                    },
                    "public": {
                      "type": "boolean",
                      "default": false,
                      "description": "If the monitor is public"
                    },
                    "degratedAfter": {
                      "type": "number",
                      "description": "The time after the monitor is considered degrated"
                    },
                    "timeout": {
                      "type": "number",
                      "description": "The timeout of the request"
                    }
                  },
                  "required": ["periodicity", "url", "regions", "method"],
                  "description": "The monitor"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["monitor"],
        "description": "Delete a monitor",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the monitor",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete the monitor",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": {} }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/:id/summary": {
      "get": {
        "tags": ["monitor"],
        "description": "Get a monitor daily summary",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the monitor",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "All the historical metrics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ok": {
                            "type": "integer",
                            "description": "The number of ok responses"
                          },
                          "count": {
                            "type": "integer",
                            "description": "The total number of request"
                          },
                          "day": { "type": "string", "nullable": true }
                        },
                        "required": ["ok", "count", "day"]
                      },
                      "description": "The daily stats"
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/notification": {
      "get": {
        "tags": ["notification"],
        "description": "Get a notification",
        "responses": {
          "200": {
            "description": "Get all your workspace notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "description": "The id of the notification",
                        "example": 1
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the notification",
                        "example": "OpenStatus Discord"
                      },
                      "provider": {
                        "type": "string",
                        "enum": [
                          "email",
                          "discord",
                          "slack",
                          "sms",
                          "pagerduty"
                        ],
                        "description": "The provider of the notification",
                        "example": "discord"
                      },
                      "payload": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "email": { "type": "string", "format": "email" }
                            },
                            "required": ["email"]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "sms": {
                                "type": "string",
                                "pattern": "^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$"
                              }
                            },
                            "required": ["sms"]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "slack": { "type": "string", "format": "uri" }
                            },
                            "required": ["slack"]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "discord": { "type": "string", "format": "uri" }
                            },
                            "required": ["discord"]
                          },
                          {
                            "type": "object",
                            "properties": { "pagerduty": { "type": "string" } },
                            "required": ["pagerduty"]
                          }
                        ],
                        "description": "The data of the notification"
                      },
                      "monitors": {
                        "type": "array",
                        "nullable": true,
                        "items": { "type": "number" },
                        "description": "The monitors that the notification is linked to",
                        "example": [1, 2]
                      }
                    },
                    "required": ["id", "name", "provider", "payload"]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["notification"],
        "description": "Create a notification",
        "requestBody": {
          "description": "The notification to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the notification",
                    "example": "OpenStatus Discord"
                  },
                  "provider": {
                    "type": "string",
                    "enum": ["email", "discord", "slack", "sms", "pagerduty"],
                    "description": "The provider of the notification",
                    "example": "discord"
                  },
                  "payload": {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "email": { "type": "string", "format": "email" }
                        },
                        "required": ["email"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "sms": {
                            "type": "string",
                            "pattern": "^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$"
                          }
                        },
                        "required": ["sms"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "slack": { "type": "string", "format": "uri" }
                        },
                        "required": ["slack"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "discord": { "type": "string", "format": "uri" }
                        },
                        "required": ["discord"]
                      },
                      {
                        "type": "object",
                        "properties": { "pagerduty": { "type": "string" } },
                        "required": ["pagerduty"]
                      }
                    ],
                    "description": "The data of the notification"
                  },
                  "monitors": {
                    "type": "array",
                    "nullable": true,
                    "items": { "type": "number" },
                    "description": "The monitors that the notification is linked to",
                    "example": [1, 2]
                  }
                },
                "required": ["name", "provider", "payload"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the created notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the notification",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the notification",
                      "example": "OpenStatus Discord"
                    },
                    "provider": {
                      "type": "string",
                      "enum": ["email", "discord", "slack", "sms", "pagerduty"],
                      "description": "The provider of the notification",
                      "example": "discord"
                    },
                    "payload": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "email": { "type": "string", "format": "email" }
                          },
                          "required": ["email"]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "sms": {
                              "type": "string",
                              "pattern": "^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$"
                            }
                          },
                          "required": ["sms"]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "slack": { "type": "string", "format": "uri" }
                          },
                          "required": ["slack"]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "discord": { "type": "string", "format": "uri" }
                          },
                          "required": ["discord"]
                        },
                        {
                          "type": "object",
                          "properties": { "pagerduty": { "type": "string" } },
                          "required": ["pagerduty"]
                        }
                      ],
                      "description": "The data of the notification"
                    },
                    "monitors": {
                      "type": "array",
                      "nullable": true,
                      "items": { "type": "number" },
                      "description": "The monitors that the notification is linked to",
                      "example": [1, 2]
                    }
                  },
                  "required": ["id", "name", "provider", "payload"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/notification/:id": {
      "get": {
        "tags": ["notification"],
        "description": "Get a notification",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the notification",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get an Status page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the notification",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the notification",
                      "example": "OpenStatus Discord"
                    },
                    "provider": {
                      "type": "string",
                      "enum": ["email", "discord", "slack", "sms", "pagerduty"],
                      "description": "The provider of the notification",
                      "example": "discord"
                    },
                    "payload": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "email": { "type": "string", "format": "email" }
                          },
                          "required": ["email"]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "sms": {
                              "type": "string",
                              "pattern": "^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$"
                            }
                          },
                          "required": ["sms"]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "slack": { "type": "string", "format": "uri" }
                          },
                          "required": ["slack"]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "discord": { "type": "string", "format": "uri" }
                          },
                          "required": ["discord"]
                        },
                        {
                          "type": "object",
                          "properties": { "pagerduty": { "type": "string" } },
                          "required": ["pagerduty"]
                        }
                      ],
                      "description": "The data of the notification"
                    },
                    "monitors": {
                      "type": "array",
                      "nullable": true,
                      "items": { "type": "number" },
                      "description": "The monitors that the notification is linked to",
                      "example": [1, 2]
                    }
                  },
                  "required": ["id", "name", "provider", "payload"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/page/:id": {
      "get": {
        "tags": ["page"],
        "description": "Get a status page",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the page",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get an Status page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the page",
                      "example": 1
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of the page",
                      "example": "My Page"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the page",
                      "example": "My awesome status page"
                    },
                    "slug": {
                      "type": "string",
                      "description": "The slug of the page",
                      "example": "my-page"
                    },
                    "customDomain": {
                      "type": "string",
                      "nullable": true,
                      "description": "The custom domain of the page. To be configured within the dashboard.",
                      "example": "status.acme.com"
                    },
                    "icon": {
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "uri",
                          "description": "The icon of the page",
                          "example": "https://example.com/icon.png"
                        },
                        { "type": "string", "enum": [""] },
                        { "nullable": true }
                      ]
                    },
                    "passwordProtected": {
                      "type": "boolean",
                      "default": false,
                      "description": "Make the page password protected. Used with the 'passwordProtected' property.",
                      "example": true
                    },
                    "password": {
                      "type": "string",
                      "nullable": true,
                      "description": "Your password to protect the page from the publi",
                      "example": "hidden-password"
                    },
                    "monitors": {
                      "anyOf": [
                        {
                          "type": "array",
                          "items": { "type": "number" },
                          "description": "The monitors of the page as an array of ids",
                          "example": [1, 2]
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "monitorId": { "type": "number" },
                              "order": { "type": "number" }
                            },
                            "required": ["monitorId", "order"]
                          },
                          "description": "The monitor as object allowing to pass id and order",
                          "example": [
                            { "monitorId": 1, "order": 0 },
                            { "monitorId": 2, "order": 1 }
                          ]
                        }
                      ]
                    }
                  },
                  "required": ["id", "title", "description", "slug"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["page"],
        "description": "Update a status page",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the page",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "The monitor to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the page",
                    "example": "My Page"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the page",
                    "example": "My awesome status page"
                  },
                  "slug": {
                    "type": "string",
                    "description": "The slug of the page",
                    "example": "my-page"
                  },
                  "customDomain": {
                    "type": "string",
                    "nullable": true,
                    "description": "The custom domain of the page. To be configured within the dashboard.",
                    "example": "status.acme.com"
                  },
                  "icon": {
                    "anyOf": [
                      {
                        "type": "string",
                        "format": "uri",
                        "description": "The icon of the page",
                        "example": "https://example.com/icon.png"
                      },
                      { "type": "string", "enum": [""] },
                      { "nullable": true }
                    ]
                  },
                  "passwordProtected": {
                    "type": "boolean",
                    "default": false,
                    "description": "Make the page password protected. Used with the 'passwordProtected' property.",
                    "example": true
                  },
                  "password": {
                    "type": "string",
                    "nullable": true,
                    "description": "Your password to protect the page from the publi",
                    "example": "hidden-password"
                  },
                  "monitors": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": { "type": "number" },
                        "description": "The monitors of the page as an array of ids",
                        "example": [1, 2]
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "monitorId": { "type": "number" },
                            "order": { "type": "number" }
                          },
                          "required": ["monitorId", "order"]
                        },
                        "description": "The monitor as object allowing to pass id and order",
                        "example": [
                          { "monitorId": 1, "order": 0 },
                          { "monitorId": 2, "order": 1 }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get an Status page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the page",
                      "example": 1
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of the page",
                      "example": "My Page"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the page",
                      "example": "My awesome status page"
                    },
                    "slug": {
                      "type": "string",
                      "description": "The slug of the page",
                      "example": "my-page"
                    },
                    "customDomain": {
                      "type": "string",
                      "nullable": true,
                      "description": "The custom domain of the page. To be configured within the dashboard.",
                      "example": "status.acme.com"
                    },
                    "icon": {
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "uri",
                          "description": "The icon of the page",
                          "example": "https://example.com/icon.png"
                        },
                        { "type": "string", "enum": [""] },
                        { "nullable": true }
                      ]
                    },
                    "passwordProtected": {
                      "type": "boolean",
                      "default": false,
                      "description": "Make the page password protected. Used with the 'passwordProtected' property.",
                      "example": true
                    },
                    "password": {
                      "type": "string",
                      "nullable": true,
                      "description": "Your password to protect the page from the publi",
                      "example": "hidden-password"
                    },
                    "monitors": {
                      "anyOf": [
                        {
                          "type": "array",
                          "items": { "type": "number" },
                          "description": "The monitors of the page as an array of ids",
                          "example": [1, 2]
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "monitorId": { "type": "number" },
                              "order": { "type": "number" }
                            },
                            "required": ["monitorId", "order"]
                          },
                          "description": "The monitor as object allowing to pass id and order",
                          "example": [
                            { "monitorId": 1, "order": 0 },
                            { "monitorId": 2, "order": 1 }
                          ]
                        }
                      ]
                    }
                  },
                  "required": ["id", "title", "description", "slug"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/page": {
      "get": {
        "tags": ["page"],
        "description": "Get all your status page",
        "responses": {
          "200": {
            "description": "Get an Status page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "description": "The id of the page",
                        "example": 1
                      },
                      "title": {
                        "type": "string",
                        "description": "The title of the page",
                        "example": "My Page"
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the page",
                        "example": "My awesome status page"
                      },
                      "slug": {
                        "type": "string",
                        "description": "The slug of the page",
                        "example": "my-page"
                      },
                      "customDomain": {
                        "type": "string",
                        "nullable": true,
                        "description": "The custom domain of the page. To be configured within the dashboard.",
                        "example": "status.acme.com"
                      },
                      "icon": {
                        "anyOf": [
                          {
                            "type": "string",
                            "format": "uri",
                            "description": "The icon of the page",
                            "example": "https://example.com/icon.png"
                          },
                          { "type": "string", "enum": [""] },
                          { "nullable": true }
                        ]
                      },
                      "passwordProtected": {
                        "type": "boolean",
                        "default": false,
                        "description": "Make the page password protected. Used with the 'passwordProtected' property.",
                        "example": true
                      },
                      "password": {
                        "type": "string",
                        "nullable": true,
                        "description": "Your password to protect the page from the publi",
                        "example": "hidden-password"
                      },
                      "monitors": {
                        "anyOf": [
                          {
                            "type": "array",
                            "items": { "type": "number" },
                            "description": "The monitors of the page as an array of ids",
                            "example": [1, 2]
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "monitorId": { "type": "number" },
                                "order": { "type": "number" }
                              },
                              "required": ["monitorId", "order"]
                            },
                            "description": "The monitor as object allowing to pass id and order",
                            "example": [
                              { "monitorId": 1, "order": 0 },
                              { "monitorId": 2, "order": 1 }
                            ]
                          }
                        ]
                      }
                    },
                    "required": ["id", "title", "description", "slug"]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["page"],
        "description": "Create a status page",
        "requestBody": {
          "description": "The status page to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the page",
                    "example": "My Page"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the page",
                    "example": "My awesome status page"
                  },
                  "slug": {
                    "type": "string",
                    "description": "The slug of the page",
                    "example": "my-page"
                  },
                  "customDomain": {
                    "type": "string",
                    "nullable": true,
                    "description": "The custom domain of the page. To be configured within the dashboard.",
                    "example": "status.acme.com"
                  },
                  "icon": {
                    "anyOf": [
                      {
                        "type": "string",
                        "format": "uri",
                        "description": "The icon of the page",
                        "example": "https://example.com/icon.png"
                      },
                      { "type": "string", "enum": [""] },
                      { "nullable": true }
                    ]
                  },
                  "passwordProtected": {
                    "type": "boolean",
                    "default": false,
                    "description": "Make the page password protected. Used with the 'passwordProtected' property.",
                    "example": true
                  },
                  "password": {
                    "type": "string",
                    "nullable": true,
                    "description": "Your password to protect the page from the publi",
                    "example": "hidden-password"
                  },
                  "monitors": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": { "type": "number" },
                        "description": "The monitors of the page as an array of ids",
                        "example": [1, 2]
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "monitorId": { "type": "number" },
                            "order": { "type": "number" }
                          },
                          "required": ["monitorId", "order"]
                        },
                        "description": "The monitor as object allowing to pass id and order",
                        "example": [
                          { "monitorId": 1, "order": 0 },
                          { "monitorId": 2, "order": 1 }
                        ]
                      }
                    ]
                  }
                },
                "required": ["title", "description", "slug"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get an Status page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the page",
                      "example": 1
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of the page",
                      "example": "My Page"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the page",
                      "example": "My awesome status page"
                    },
                    "slug": {
                      "type": "string",
                      "description": "The slug of the page",
                      "example": "my-page"
                    },
                    "customDomain": {
                      "type": "string",
                      "nullable": true,
                      "description": "The custom domain of the page. To be configured within the dashboard.",
                      "example": "status.acme.com"
                    },
                    "icon": {
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "uri",
                          "description": "The icon of the page",
                          "example": "https://example.com/icon.png"
                        },
                        { "type": "string", "enum": [""] },
                        { "nullable": true }
                      ]
                    },
                    "passwordProtected": {
                      "type": "boolean",
                      "default": false,
                      "description": "Make the page password protected. Used with the 'passwordProtected' property.",
                      "example": true
                    },
                    "password": {
                      "type": "string",
                      "nullable": true,
                      "description": "Your password to protect the page from the publi",
                      "example": "hidden-password"
                    },
                    "monitors": {
                      "anyOf": [
                        {
                          "type": "array",
                          "items": { "type": "number" },
                          "description": "The monitors of the page as an array of ids",
                          "example": [1, 2]
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "monitorId": { "type": "number" },
                              "order": { "type": "number" }
                            },
                            "required": ["monitorId", "order"]
                          },
                          "description": "The monitor as object allowing to pass id and order",
                          "example": [
                            { "monitorId": 1, "order": 0 },
                            { "monitorId": 2, "order": 1 }
                          ]
                        }
                      ]
                    }
                  },
                  "required": ["id", "title", "description", "slug"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/page_subscriber/:id/update": {
      "post": {
        "tags": ["page"],
        "description": "Add a subscriber to a status page",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the page",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "the subscriber payload",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email of the subscriber"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "The email of the subscriber"
                    }
                  },
                  "required": ["email"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/status_report": {
      "get": {
        "tags": ["status_report"],
        "description": "Get all Status Reports",
        "responses": {
          "200": {
            "description": "Get all status reports",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "description": "The id of the status report"
                      },
                      "title": {
                        "type": "string",
                        "description": "The title of the status report",
                        "example": "Documenso"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "investigating",
                          "identified",
                          "monitoring",
                          "resolved"
                        ],
                        "description": "The current status of the report"
                      },
                      "statusReportUpdateIds": {
                        "type": "array",
                        "nullable": true,
                        "items": { "type": "number" },
                        "default": [],
                        "description": "The ids of the status report updates"
                      },
                      "monitorIds": {
                        "type": "array",
                        "nullable": true,
                        "items": { "type": "number" },
                        "default": [],
                        "description": "id of monitors this report needs to refer"
                      },
                      "pageId": {
                        "type": "number",
                        "nullable": true,
                        "description": "The id of the page this status report belongs to"
                      }
                    },
                    "required": ["id", "title", "status"]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["status_report"],
        "description": "Create a Status Report",
        "requestBody": {
          "description": "The status report to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the status report",
                    "example": "Documenso"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "investigating",
                      "identified",
                      "monitoring",
                      "resolved"
                    ],
                    "description": "The current status of the report"
                  },
                  "monitorIds": {
                    "type": "array",
                    "nullable": true,
                    "items": { "type": "number" },
                    "default": [],
                    "description": "id of monitors this report needs to refer"
                  },
                  "pageId": {
                    "type": "number",
                    "nullable": true,
                    "description": "The id of the page this status report belongs to"
                  },
                  "date": {
                    "type": "string",
                    "nullable": true,
                    "description": "The date of the report in ISO8601 format"
                  },
                  "message": {
                    "type": "string",
                    "description": "The message of the current status of incident"
                  }
                },
                "required": ["title", "status", "message"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status report created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the status report"
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of the status report",
                      "example": "Documenso"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "investigating",
                        "identified",
                        "monitoring",
                        "resolved"
                      ],
                      "description": "The current status of the report"
                    },
                    "statusReportUpdateIds": {
                      "type": "array",
                      "nullable": true,
                      "items": { "type": "number" },
                      "default": [],
                      "description": "The ids of the status report updates"
                    },
                    "monitorIds": {
                      "type": "array",
                      "nullable": true,
                      "items": { "type": "number" },
                      "default": [],
                      "description": "id of monitors this report needs to refer"
                    },
                    "pageId": {
                      "type": "number",
                      "nullable": true,
                      "description": "The id of the page this status report belongs to"
                    }
                  },
                  "required": ["id", "title", "status"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/status_report/:id": {
      "delete": {
        "tags": ["status_report"],
        "description": "Delete a Status Report",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the status report",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Status report deleted",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": {} }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["status_report"],
        "description": "Get a Status Report",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the status report",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all status reports",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the status report"
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of the status report",
                      "example": "Documenso"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "investigating",
                        "identified",
                        "monitoring",
                        "resolved"
                      ],
                      "description": "The current status of the report"
                    },
                    "statusReportUpdateIds": {
                      "type": "array",
                      "nullable": true,
                      "items": { "type": "number" },
                      "default": [],
                      "description": "The ids of the status report updates"
                    },
                    "monitorIds": {
                      "type": "array",
                      "nullable": true,
                      "items": { "type": "number" },
                      "default": [],
                      "description": "id of monitors this report needs to refer"
                    },
                    "pageId": {
                      "type": "number",
                      "nullable": true,
                      "description": "The id of the page this status report belongs to"
                    }
                  },
                  "required": ["id", "title", "status"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/status_report/:id/update": {
      "post": {
        "tags": ["status_report"],
        "description": "Create an status report update. Deprecated, please use /status-report-updates instead.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the status report",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "the status report update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "investigating",
                      "identified",
                      "monitoring",
                      "resolved"
                    ],
                    "description": "The status of the update"
                  },
                  "date": {
                    "type": "string",
                    "nullable": true,
                    "description": "The date of the update in ISO8601 format"
                  },
                  "message": {
                    "type": "string",
                    "description": "The message of the update"
                  },
                  "statusReportId": {
                    "type": "number",
                    "description": "The id of the status report"
                  }
                },
                "required": ["status", "date", "message", "statusReportId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status report updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the status report"
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of the status report",
                      "example": "Documenso"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "investigating",
                        "identified",
                        "monitoring",
                        "resolved"
                      ],
                      "description": "The current status of the report"
                    },
                    "statusReportUpdateIds": {
                      "type": "array",
                      "nullable": true,
                      "items": { "type": "number" },
                      "default": [],
                      "description": "The ids of the status report updates"
                    },
                    "monitorIds": {
                      "type": "array",
                      "nullable": true,
                      "items": { "type": "number" },
                      "default": [],
                      "description": "id of monitors this report needs to refer"
                    },
                    "pageId": {
                      "type": "number",
                      "nullable": true,
                      "description": "The id of the page this status report belongs to"
                    }
                  },
                  "required": ["id", "title", "status"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/status_report_update/:id": {
      "get": {
        "tags": ["status_report_update"],
        "description": "Get a Status Reports Update",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the update",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a status report update",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "nullable": true,
                      "description": "The id of the update"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "investigating",
                        "identified",
                        "monitoring",
                        "resolved"
                      ],
                      "description": "The status of the update"
                    },
                    "date": {
                      "type": "string",
                      "nullable": true,
                      "description": "The date of the update in ISO8601 format"
                    },
                    "message": {
                      "type": "string",
                      "description": "The message of the update"
                    },
                    "statusReportId": {
                      "type": "number",
                      "description": "The id of the status report"
                    }
                  },
                  "required": ["status", "date", "message", "statusReportId"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/status_report_update": {
      "post": {
        "tags": ["status_report_update"],
        "description": "Create a Status Report Update",
        "requestBody": {
          "description": "the status report update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "investigating",
                      "identified",
                      "monitoring",
                      "resolved"
                    ],
                    "description": "The status of the update"
                  },
                  "date": {
                    "type": "string",
                    "nullable": true,
                    "description": "The date of the update in ISO8601 format"
                  },
                  "message": {
                    "type": "string",
                    "description": "The message of the update"
                  },
                  "statusReportId": {
                    "type": "number",
                    "description": "The id of the status report"
                  }
                },
                "required": ["status", "date", "message", "statusReportId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get all status report updates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "nullable": true,
                      "description": "The id of the update"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "investigating",
                        "identified",
                        "monitoring",
                        "resolved"
                      ],
                      "description": "The status of the update"
                    },
                    "date": {
                      "type": "string",
                      "nullable": true,
                      "description": "The date of the update in ISO8601 format"
                    },
                    "message": {
                      "type": "string",
                      "description": "The message of the update"
                    },
                    "statusReportId": {
                      "type": "number",
                      "description": "The id of the status report"
                    }
                  },
                  "required": ["status", "date", "message", "statusReportId"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/check/http": {
      "post": {
        "tags": ["page"],
        "description": "Run a single check",
        "requestBody": {
          "description": "The run request to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "The url to monitor",
                    "example": "https://www.documenso.co"
                  },
                  "body": {
                    "type": "string",
                    "nullable": true,
                    "default": "",
                    "description": "The body",
                    "example": "Hello World"
                  },
                  "headers": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": { "type": "string" },
                        "value": { "type": "string" }
                      },
                      "required": ["key", "value"]
                    },
                    "default": [],
                    "description": "The headers of your request",
                    "example": [
                      { "key": "x-apikey", "value": "supersecrettoken" }
                    ]
                  },
                  "method": {
                    "type": "string",
                    "enum": ["GET", "POST", "HEAD"],
                    "default": "GET",
                    "example": "GET"
                  },
                  "regions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ams",
                        "arn",
                        "atl",
                        "bog",
                        "bom",
                        "bos",
                        "cdg",
                        "den",
                        "dfw",
                        "ewr",
                        "eze",
                        "fra",
                        "gdl",
                        "gig",
                        "gru",
                        "hkg",
                        "iad",
                        "jnb",
                        "lax",
                        "lhr",
                        "mad",
                        "mia",
                        "nrt",
                        "ord",
                        "otp",
                        "phx",
                        "qro",
                        "scl",
                        "sjc",
                        "sea",
                        "sin",
                        "syd",
                        "waw",
                        "yul",
                        "yyz"
                      ]
                    },
                    "default": [],
                    "description": "Where we should monitor it",
                    "example": ["ams"]
                  },
                  "runCount": {
                    "type": "number",
                    "maximum": 5,
                    "default": 1,
                    "description": "The number of times to run the check"
                  },
                  "aggregated": {
                    "type": "boolean",
                    "description": "Whether to aggregate the results or not"
                  }
                },
                "required": ["url"],
                "description": "The check request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a run result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "The id of the check"
                    },
                    "raw": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "dnsStart": {
                            "type": "number",
                            "description": "DNS timestamp start time in UTC "
                          },
                          "dnsDone": {
                            "type": "number",
                            "description": "DNS timestamp end time in UTC "
                          },
                          "connectStart": {
                            "type": "number",
                            "description": "Connect timestamp start time in UTC "
                          },
                          "connectDone": {
                            "type": "number",
                            "description": "Connect timestamp end time in UTC "
                          },
                          "tlsHandshakeStart": {
                            "type": "number",
                            "description": "TLS handshake timestamp start time in UTC "
                          },
                          "tlsHandshakeDone": {
                            "type": "number",
                            "description": "TLS handshake timestamp end time in UTC "
                          },
                          "firstByteStart": {
                            "type": "number",
                            "description": "First byte timestamp start time in UTC "
                          },
                          "firstByteDone": {
                            "type": "number",
                            "description": "First byte timestamp end time in UTC "
                          },
                          "transferStart": {
                            "type": "number",
                            "description": "Transfer timestamp start time in UTC "
                          },
                          "transferDone": {
                            "type": "number",
                            "description": "Transfer timestamp end time in UTC "
                          }
                        },
                        "required": [
                          "dnsStart",
                          "dnsDone",
                          "connectStart",
                          "connectDone",
                          "tlsHandshakeStart",
                          "tlsHandshakeDone",
                          "firstByteStart",
                          "firstByteDone",
                          "transferStart",
                          "transferDone"
                        ]
                      },
                      "description": "The raw data of the check"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "number",
                          "description": "The timestamp of the response in UTC"
                        },
                        "status": {
                          "type": "number",
                          "description": "The status code of the response"
                        },
                        "latency": {
                          "type": "number",
                          "description": "The latency of the response"
                        },
                        "body": {
                          "type": "string",
                          "description": "The body of the response"
                        },
                        "headers": {
                          "type": "object",
                          "additionalProperties": { "type": "string" },
                          "description": "The headers of the response"
                        },
                        "timing": {
                          "type": "object",
                          "properties": {
                            "dnsStart": {
                              "type": "number",
                              "description": "DNS timestamp start time in UTC "
                            },
                            "dnsDone": {
                              "type": "number",
                              "description": "DNS timestamp end time in UTC "
                            },
                            "connectStart": {
                              "type": "number",
                              "description": "Connect timestamp start time in UTC "
                            },
                            "connectDone": {
                              "type": "number",
                              "description": "Connect timestamp end time in UTC "
                            },
                            "tlsHandshakeStart": {
                              "type": "number",
                              "description": "TLS handshake timestamp start time in UTC "
                            },
                            "tlsHandshakeDone": {
                              "type": "number",
                              "description": "TLS handshake timestamp end time in UTC "
                            },
                            "firstByteStart": {
                              "type": "number",
                              "description": "First byte timestamp start time in UTC "
                            },
                            "firstByteDone": {
                              "type": "number",
                              "description": "First byte timestamp end time in UTC "
                            },
                            "transferStart": {
                              "type": "number",
                              "description": "Transfer timestamp start time in UTC "
                            },
                            "transferDone": {
                              "type": "number",
                              "description": "Transfer timestamp end time in UTC "
                            }
                          },
                          "required": [
                            "dnsStart",
                            "dnsDone",
                            "connectStart",
                            "connectDone",
                            "tlsHandshakeStart",
                            "tlsHandshakeDone",
                            "firstByteStart",
                            "firstByteDone",
                            "transferStart",
                            "transferDone"
                          ],
                          "description": "The timing metrics of the response"
                        },
                        "aggregated": {
                          "type": "object",
                          "properties": {
                            "dns": {
                              "type": "object",
                              "properties": {
                                "p50": {
                                  "type": "number",
                                  "description": "The 50th percentile"
                                },
                                "p75": {
                                  "type": "number",
                                  "description": "The 75th percentile"
                                },
                                "p95": {
                                  "type": "number",
                                  "description": "The 95th percentile"
                                },
                                "p99": {
                                  "type": "number",
                                  "description": "The 99th percentile"
                                },
                                "min": {
                                  "type": "number",
                                  "description": "The minimum value"
                                },
                                "max": {
                                  "type": "number",
                                  "description": "The maximum value"
                                }
                              },
                              "required": [
                                "p50",
                                "p75",
                                "p95",
                                "p99",
                                "min",
                                "max"
                              ],
                              "description": "The aggregated DNS timing of the check"
                            },
                            "connection": {
                              "type": "object",
                              "properties": {
                                "p50": {
                                  "type": "number",
                                  "description": "The 50th percentile"
                                },
                                "p75": {
                                  "type": "number",
                                  "description": "The 75th percentile"
                                },
                                "p95": {
                                  "type": "number",
                                  "description": "The 95th percentile"
                                },
                                "p99": {
                                  "type": "number",
                                  "description": "The 99th percentile"
                                },
                                "min": {
                                  "type": "number",
                                  "description": "The minimum value"
                                },
                                "max": {
                                  "type": "number",
                                  "description": "The maximum value"
                                }
                              },
                              "required": [
                                "p50",
                                "p75",
                                "p95",
                                "p99",
                                "min",
                                "max"
                              ],
                              "description": "The aggregated connection timing of the check"
                            },
                            "tls": {
                              "type": "object",
                              "properties": {
                                "p50": {
                                  "type": "number",
                                  "description": "The 50th percentile"
                                },
                                "p75": {
                                  "type": "number",
                                  "description": "The 75th percentile"
                                },
                                "p95": {
                                  "type": "number",
                                  "description": "The 95th percentile"
                                },
                                "p99": {
                                  "type": "number",
                                  "description": "The 99th percentile"
                                },
                                "min": {
                                  "type": "number",
                                  "description": "The minimum value"
                                },
                                "max": {
                                  "type": "number",
                                  "description": "The maximum value"
                                }
                              },
                              "required": [
                                "p50",
                                "p75",
                                "p95",
                                "p99",
                                "min",
                                "max"
                              ],
                              "description": "The aggregated tls timing of the check"
                            },
                            "firstByte": {
                              "type": "object",
                              "properties": {
                                "p50": {
                                  "type": "number",
                                  "description": "The 50th percentile"
                                },
                                "p75": {
                                  "type": "number",
                                  "description": "The 75th percentile"
                                },
                                "p95": {
                                  "type": "number",
                                  "description": "The 95th percentile"
                                },
                                "p99": {
                                  "type": "number",
                                  "description": "The 99th percentile"
                                },
                                "min": {
                                  "type": "number",
                                  "description": "The minimum value"
                                },
                                "max": {
                                  "type": "number",
                                  "description": "The maximum value"
                                }
                              },
                              "required": [
                                "p50",
                                "p75",
                                "p95",
                                "p99",
                                "min",
                                "max"
                              ],
                              "description": "The aggregated first byte timing of the check"
                            },
                            "transfer": {
                              "type": "object",
                              "properties": {
                                "p50": {
                                  "type": "number",
                                  "description": "The 50th percentile"
                                },
                                "p75": {
                                  "type": "number",
                                  "description": "The 75th percentile"
                                },
                                "p95": {
                                  "type": "number",
                                  "description": "The 95th percentile"
                                },
                                "p99": {
                                  "type": "number",
                                  "description": "The 99th percentile"
                                },
                                "min": {
                                  "type": "number",
                                  "description": "The minimum value"
                                },
                                "max": {
                                  "type": "number",
                                  "description": "The maximum value"
                                }
                              },
                              "required": [
                                "p50",
                                "p75",
                                "p95",
                                "p99",
                                "min",
                                "max"
                              ],
                              "description": "The aggregated transfer timing of the check"
                            },
                            "latency": {
                              "type": "object",
                              "properties": {
                                "p50": {
                                  "type": "number",
                                  "description": "The 50th percentile"
                                },
                                "p75": {
                                  "type": "number",
                                  "description": "The 75th percentile"
                                },
                                "p95": {
                                  "type": "number",
                                  "description": "The 95th percentile"
                                },
                                "p99": {
                                  "type": "number",
                                  "description": "The 99th percentile"
                                },
                                "min": {
                                  "type": "number",
                                  "description": "The minimum value"
                                },
                                "max": {
                                  "type": "number",
                                  "description": "The maximum value"
                                }
                              },
                              "required": [
                                "p50",
                                "p75",
                                "p95",
                                "p99",
                                "min",
                                "max"
                              ],
                              "description": "The aggregated latency timing of the check"
                            }
                          },
                          "required": [
                            "dns",
                            "connection",
                            "tls",
                            "firstByte",
                            "transfer",
                            "latency"
                          ],
                          "description": "The aggregated data dns timing of the check"
                        },
                        "region": {
                          "type": "string",
                          "description": "The region where the check ran"
                        }
                      },
                      "required": [
                        "timestamp",
                        "status",
                        "latency",
                        "timing",
                        "region"
                      ],
                      "description": "The last response of the check"
                    },
                    "aggregated": {
                      "type": "object",
                      "properties": {
                        "dns": {
                          "type": "object",
                          "properties": {
                            "p50": {
                              "type": "number",
                              "description": "The 50th percentile"
                            },
                            "p75": {
                              "type": "number",
                              "description": "The 75th percentile"
                            },
                            "p95": {
                              "type": "number",
                              "description": "The 95th percentile"
                            },
                            "p99": {
                              "type": "number",
                              "description": "The 99th percentile"
                            },
                            "min": {
                              "type": "number",
                              "description": "The minimum value"
                            },
                            "max": {
                              "type": "number",
                              "description": "The maximum value"
                            }
                          },
                          "required": [
                            "p50",
                            "p75",
                            "p95",
                            "p99",
                            "min",
                            "max"
                          ],
                          "description": "The aggregated data of the check"
                        },
                        "connect": {
                          "type": "object",
                          "properties": {
                            "p50": {
                              "type": "number",
                              "description": "The 50th percentile"
                            },
                            "p75": {
                              "type": "number",
                              "description": "The 75th percentile"
                            },
                            "p95": {
                              "type": "number",
                              "description": "The 95th percentile"
                            },
                            "p99": {
                              "type": "number",
                              "description": "The 99th percentile"
                            },
                            "min": {
                              "type": "number",
                              "description": "The minimum value"
                            },
                            "max": {
                              "type": "number",
                              "description": "The maximum value"
                            }
                          },
                          "required": [
                            "p50",
                            "p75",
                            "p95",
                            "p99",
                            "min",
                            "max"
                          ],
                          "description": "The aggregated data of the check"
                        },
                        "tls": {
                          "type": "object",
                          "properties": {
                            "p50": {
                              "type": "number",
                              "description": "The 50th percentile"
                            },
                            "p75": {
                              "type": "number",
                              "description": "The 75th percentile"
                            },
                            "p95": {
                              "type": "number",
                              "description": "The 95th percentile"
                            },
                            "p99": {
                              "type": "number",
                              "description": "The 99th percentile"
                            },
                            "min": {
                              "type": "number",
                              "description": "The minimum value"
                            },
                            "max": {
                              "type": "number",
                              "description": "The maximum value"
                            }
                          },
                          "required": [
                            "p50",
                            "p75",
                            "p95",
                            "p99",
                            "min",
                            "max"
                          ],
                          "description": "The aggregated data of the check"
                        },
                        "firstByte": {
                          "type": "object",
                          "properties": {
                            "p50": {
                              "type": "number",
                              "description": "The 50th percentile"
                            },
                            "p75": {
                              "type": "number",
                              "description": "The 75th percentile"
                            },
                            "p95": {
                              "type": "number",
                              "description": "The 95th percentile"
                            },
                            "p99": {
                              "type": "number",
                              "description": "The 99th percentile"
                            },
                            "min": {
                              "type": "number",
                              "description": "The minimum value"
                            },
                            "max": {
                              "type": "number",
                              "description": "The maximum value"
                            }
                          },
                          "required": [
                            "p50",
                            "p75",
                            "p95",
                            "p99",
                            "min",
                            "max"
                          ],
                          "description": "The aggregated data of the check"
                        },
                        "transfer": {
                          "type": "object",
                          "properties": {
                            "p50": {
                              "type": "number",
                              "description": "The 50th percentile"
                            },
                            "p75": {
                              "type": "number",
                              "description": "The 75th percentile"
                            },
                            "p95": {
                              "type": "number",
                              "description": "The 95th percentile"
                            },
                            "p99": {
                              "type": "number",
                              "description": "The 99th percentile"
                            },
                            "min": {
                              "type": "number",
                              "description": "The minimum value"
                            },
                            "max": {
                              "type": "number",
                              "description": "The maximum value"
                            }
                          },
                          "required": [
                            "p50",
                            "p75",
                            "p95",
                            "p99",
                            "min",
                            "max"
                          ],
                          "description": "The aggregated data of the check"
                        },
                        "latency": {
                          "type": "object",
                          "properties": {
                            "p50": {
                              "type": "number",
                              "description": "The 50th percentile"
                            },
                            "p75": {
                              "type": "number",
                              "description": "The 75th percentile"
                            },
                            "p95": {
                              "type": "number",
                              "description": "The 95th percentile"
                            },
                            "p99": {
                              "type": "number",
                              "description": "The 99th percentile"
                            },
                            "min": {
                              "type": "number",
                              "description": "The minimum value"
                            },
                            "max": {
                              "type": "number",
                              "description": "The maximum value"
                            }
                          },
                          "required": [
                            "p50",
                            "p75",
                            "p95",
                            "p99",
                            "min",
                            "max"
                          ],
                          "description": "The aggregated data of the check"
                        }
                      },
                      "required": [
                        "dns",
                        "connect",
                        "tls",
                        "firstByte",
                        "transfer",
                        "latency"
                      ],
                      "description": "The aggregated data of the check"
                    }
                  },
                  "required": ["id", "raw", "response"]
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrBadRequest" }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrUnauthorized" }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrForbidden" }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrNotFound" }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrConflict" }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        }
      }
    }
  }
}
